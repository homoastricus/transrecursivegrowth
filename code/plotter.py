import matplotlib.pyplot as plt
import numpy as np
import math
from typing import List, Tuple
import warnings


class TRTPlotter:
    def __init__(self, mode: str = 'SECURE', precision: int = 1000):
        self.mode = mode
        self.precision = precision

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if self.mode == 'SECURE':
            self.max_value = 1e100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.max_depth = 20
        else:
            self.max_value = float('inf')
            self.max_depth = float('inf')

    def S(self, t: float) -> float:
        """–°–≥–ª–∞–∂–∏–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è S(t) = t/(1+t)"""
        if t > 1e100:
            return 1.0
        return t / (1 + t)

    def T0(self, phi: float) -> float:
        """–ë–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è 0"""
        if phi >= 0.9999999999:
            return self.max_value
        return 1.0 / (1.0 - phi)

    def Tn(self, phi: float, n: int) -> float:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è n"""
        if n == 0:
            return self.T0(phi)
        if n > self.max_depth:
            return self.max_value

        prev = self.Tn(phi, n - 1)
        if prev > 1000:
            return self.max_value
        return math.exp(prev)

    def HCCSF(self, n: int, phi: float) -> float:
        """–§—É–Ω–∫—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –≤—ã—á–∏—Å–ª–∏–º–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        if n < 0:
            return 0.0

        if n == 0:
            return self.S(self.T0(phi))

        try:
            Tn_phi = self.Tn(phi, n)
            Tn_0 = self.Tn(0.0, n)

            S_Tn_phi = self.S(Tn_phi)
            S_Tn_0 = self.S(Tn_0)

            numerator = S_Tn_phi - S_Tn_0
            denominator = 1 - S_Tn_0

            if abs(denominator) < 1e-300:
                return n + 0.999999999
            return n + numerator / denominator

        except (OverflowError, ZeroDivisionError):
            return n + 0.999999999

    def META_ITER(self, G: float, k: int) -> float:
        """–û–ø–µ—Ä–∞—Ç–æ—Ä –º–µ—Ç–∞-–∏—Ç–µ—Ä–∞—Ü–∏–∏"""
        if k == 0:
            return G

        current = G
        max_iter = min(k, 100) if self.mode == 'SECURE' else k

        for i in range(max_iter):
            try:
                if current > self.max_value:
                    return self.max_value

                inner_arg = 1 - math.exp(-current)
                n_level = int(math.floor(G))
                hccsf_val = self.HCCSF(n_level, inner_arg)
                current = math.exp(hccsf_val)

            except (OverflowError, ValueError):
                return self.max_value

        return current

    def TRANSCEND(self, x: float) -> float:
        """–¢—Ä–∞–Ω—Å—Ü–µ–Ω–¥–µ–Ω—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–æ—Å—Ç–∞"""
        n = int(x)
        phi = x - n

        # –î–ª—è n=0 –∏—Å–ø–æ–ª—å–∑—É–µ–º T0(phi)
        if n == 0:
            T_prev = self.T0(phi)
        else:
            T_prev = self.Tn(phi, n - 1)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
        if T_prev > 1000 and self.mode == 'SECURE':
            return self.max_value

        try:
            G = self.HCCSF(n, 1 - math.exp(-T_prev))
            k = int(math.exp(G))

            if k > 1000 and self.mode == 'SECURE':
                k = 1000

            meta_result = self.META_ITER(G, k)

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–µ–ø–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
            power_base = min(meta_result, 1000) if self.mode == 'SECURE' else meta_result
            exponent = min(T_prev, 100) if self.mode == 'SECURE' else T_prev

            power_result = power_base ** exponent
            final_result = math.exp(power_result)

            return min(final_result, self.max_value)

        except (OverflowError, ValueError):
            return self.max_value

    def safe_log10(self, value: float) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ log10 —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        if value <= 0:
            return 0
        if value > 1e100:
            return 100
        try:
            return math.log10(value)
        except (OverflowError, ValueError):
            return 100

    def generate_plot_data(self, start: float, end: float, num_points: int = 1000) -> Tuple[List[float], List[float]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
        x_values = np.linspace(start, end, num_points)
        y_values = []

        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ TRANSCEND(x) –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [{start}, {end}]...")

        for i, x in enumerate(x_values):
            if i % 100 == 0:
                print(f"–í—ã—á–∏—Å–ª–µ–Ω–æ {i}/{num_points} —Ç–æ—á–µ–∫...")

            try:
                y = self.TRANSCEND(x)
                #log_y = self.safe_log10(y)
                y_values.append(y)
            except:
                y_values.append(100)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∞

        return x_values.tolist(), y_values

    def plot_transcend(self, start: float, end: float, num_points: int = 1000,
                       title: str = "–§—É–Ω–∫—Ü–∏—è TRANSCEND(x)",
                       save_path: str = None):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ TRANSCEND"""

        x_values, y_values = self.generate_plot_data(start, end, num_points)

        plt.figure(figsize=(12, 8))
        plt.plot(x_values, y_values, 'b-', linewidth=2, label='log‚ÇÅ‚ÇÄ(TRANSCEND(x))')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.xlabel('x', fontsize=12)
        plt.ylabel('log‚ÇÅ‚ÇÄ(TRANSCEND(x))', fontsize=12)
        plt.title(title, fontsize=14, fontweight='bold')
        plt.grid(True, alpha=0.3)
        plt.legend(fontsize=10)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏–π
        plt.text(0.02, 0.98, f'–†–µ–∂–∏–º: {self.mode}', transform=plt.gca().transAxes,
                 fontsize=10, verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        plt.ylim(bottom=0)

        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {save_path}")

        plt.tight_layout()
        plt.show()

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.print_statistics(x_values, y_values)

    def print_statistics(self, x_values: List[float], y_values: List[float]):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–∞"""
        max_y = max(y_values)
        max_x = x_values[y_values.index(max_y)]

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞:")
        print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω x: [{x_values[0]:.3f}, {x_values[-1]:.3f}]")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: log‚ÇÅ‚ÇÄ(TRANSCEND({max_x:.3f})) = {max_y:.2f}")
        print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ TRANSCEND: 10^{max_y:.0f}")
        print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {len(x_values)}")

        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫
        critical_points = []
        for i in range(1, len(y_values) - 1):
            if y_values[i] > y_values[i - 1] and y_values[i] > y_values[i + 1]:
                critical_points.append((x_values[i], y_values[i]))

        if critical_points:
            print(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞: {len(critical_points)}")
            for x, y in critical_points[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"     x={x:.3f}, log‚ÇÅ‚ÇÄ(TRANSCEND)={y:.2f}")


# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def demo_plots():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"""

    # 1. –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –º–∞–ª–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [0, 2]
    print("=" * 50)
    print("–ì–†–ê–§–ò–ö 1: TRANSCEND(x) –Ω–∞ [0, 2]")
    print("=" * 50)

    plotter1 = TRTPlotter(mode='SECURE')
    plotter1.plot_transcend(0, 2, 500,
                            "TRANSCEND(x) –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [0, 2]",
                            "transcend_0_2.png")

    # 2. –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [0, 1] —Å –≤—ã—Å–æ–∫–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
    print("\n" + "=" * 50)
    print("–ì–†–ê–§–ò–ö 2: TRANSCEND(x) –Ω–∞ [0, 1] (–≤—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)")
    print("=" * 50)

    plotter2 = TRTPlotter(mode='SECURE')
    plotter2.plot_transcend(0, 1, 1000,
                            "TRANSCEND(x) –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [0, 1]",
                            "transcend_0_1_detailed.png")

    # 3. –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [1, 3]
    print("\n" + "=" * 50)
    print("–ì–†–ê–§–ò–ö 3: TRANSCEND(x) –Ω–∞ [1, 3]")
    print("=" * 50)

    plotter3 = TRTPlotter(mode='SECURE')
    plotter3.plot_transcend(1, 3, 500,
                            "TRANSCEND(x) –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [1, 3]",
                            "transcend_1_3.png")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
def plot_custom_range(start: float, end: float, num_points: int = 1000, mode: str = 'SECURE'):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ"""

    plotter = TRTPlotter(mode=mode)
    title = f"TRANSCEND(x) –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [{start}, {end}]"
    filename = f"transcend_{start}_{end}.png".replace('.', '_')

    plotter.plot_transcend(start, end, num_points, title, filename)


# –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    #demo_plots()

    # –ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    plot_custom_range(1, 1.3, 800, 'SECURE')